{"version":3,"sources":["../../src/datasource.js"],"names":["process","env","globalCurrentToken","globalHOST","userCredentials","GenericDatasource","instanceSettings","$q","backendSrv","templateSrv","type","url","name","targetID","q","withCredentials","headers","basicAuth","length","options","query","buildQueryParameters","targets","filter","t","hide","i","console","log","when","data","getAdhocFilters","adhocFilters","doRequest","method","then","response","status","message","title","HOST","USERNAME","PASSWORD","json","fetch","referrerPolicy","mode","JSON","stringify","opts","agent","rejectUnauthorized","xhr","XMLHttpRequest","addEventListener","readyState","DONE","responseText","open","send","credentials","reponse","tryAuthentication","token","session","get","verify","False","status_code","print","getNewToken","testPrint","replace","annotation","annotationQuery","range","datasource","enable","iconColor","rangeRaw","result","interpolated","target","mapToTextValue","grafanaRow","goodGrafanaRow","_","map","d","text","value","isObject","datasourceRequest","scopedVars","refId","metricID","pageFamilyID","secondTargetID","granularity","Promise","resolve","reject"],"mappings":"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","file":"datasource.js","sourcesContent":["\nimport _ from \"lodash\";\nprocess.env[\"NODE_TLS_REJECT_UNAUTHORIZED\"] = 0;\nvar globalCurrentToken;\nvar globalHOST = \"knl640.krj.gie\";\nvar userCredentials = {\n  \"user_credentials\":\n      {\n          \"username\":\"ncrinon\", \"password\":\"krj\"\n      },\n  \"generate_refresh_token\": false\n};\n\n\nexport class GenericDatasource {\n  constructor(instanceSettings, $q, backendSrv, templateSrv) {\n    // \"type\": \"mgent-appresponse-json-datasource\"\n    this.type = instanceSettings.type;\n    // \"url\": \"/api/datasources/proxy/26\"\n    this.url = instanceSettings.url;\n    // \"name\": \"AppResponse\"\n    this.name = instanceSettings.name;\n    this.targetID = instanceSettings.targetID;\n    this.q = $q;\n    // infos about a lot of things about backend server and user logged\n    this.backendSrv = backendSrv;\n    this.templateSrv = templateSrv;\n    this.withCredentials = instanceSettings.withCredentials;\n    this.headers = {'Content-Type': 'application/json'};\n\n  \n    if (typeof instanceSettings.basicAuth === 'string' && instanceSettings.basicAuth.length > 0) {\n      this.headers['Authorization'] = instanceSettings.basicAuth;\n    }\n    \n\n\n\n\n  }\n\n  // Ask '/query' end point, use function buildQueryParameters() to build data\n  // These data are sent to Python \n  query(options) {\n    var query = this.buildQueryParameters(options);\n    query.targets = query.targets.filter(t => !t.hide);\n\n    // Debugging purpose\n    for(var i=0; i<= query.targets.length; i++) {\n      console.log(\"Query \" + i);\n      console.log(query.targets[i]);\n    }\n\n    if (query.targets.length <= 0) {\n      return this.q.when({data: []});\n    }\n\n    if (this.templateSrv.getAdhocFilters) {\n      query.adhocFilters = this.templateSrv.getAdhocFilters(this.name);\n    } else {\n      query.adhocFilters = [];\n    }\n    return this.doRequest({\n      url: this.url + '/query',\n      data: query,\n      method: 'POST'\n    });\n  }\n\n\n  // Function to test if datasource is connected (only used when setting up the plugin in Grafana)\n  testDatasource() {\n    return this.doRequest({\n      url: this.url + '/',\n      method: 'GET',\n    }).then(response => {\n      if (response.status === 200) {\n        return { status: \"success\", message: \"Data source is working\", title: \"Success\" };\n      }\n    });\n  }\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  testPrint(){\n    var HOST = \"knl640.krj.gie\";\n    var USERNAME = \"ncrinon\";\n    var PASSWORD = \"krj\";\n  }\n\n\n\n\n\ntryAuthentication(){\n// FONCTIONNE ::::: FIREFOX DEV Juste un GET infos de la sonde ET RECUPERATION DE REPONSE DANS ANALYSE NETWORK \n// tryAuthentication(credentials){\n  const url = 'https://knl640.krj.gie/api/common/1.0/auth_info';\n  var json =\"\";\n    const response = fetch(url,{\n      referrerPolicy: 'unsafe-url',\n      mode: 'no-cors',\n      method: 'GET', // or 'PUT'\n      headers: {\n        // Ces headers passent a condition que la clef soit reconnue par le navigateur\n      'Accept': 'application/json, text/plain, */*',\n      'Content-Type': 'application/json',\n      },\n    }).then(json)\n    .then(function (data) {\n      console.log(\"console.log(fetch)\");\n      console.log('Request succeeded with JSON response', data);\n    });\n    console.log( JSON.stringify(response) );\n\n\n// ENVOYER DES CREDNENTIAL === CREDENTIAL EST UNE OPTION DE FETCH\n\n\n    // TENTER XHR ###################################################################\n\n    var opts = {agent: false };\n    // SSL options for Node.js client\n    // opts.pfx = this.pfx;\n    // opts.key = this.key;\n    // opts.passphrase = this.passphrase;\n    // opts.cert = this.cert;\n    // opts.ca = this.ca;\n    // opts.ciphers = this.ciphers;\n    opts.rejectUnauthorized = false;\n  \n    var xhr = this.xhr = new XMLHttpRequest(opts);\n    \n    xhr.addEventListener(\"readystatechange\", function () {\n        if (this.readyState === this.DONE) {\n          console.log(\"console.log(xhr) 1\");\n            console.log(this.responseText);\n        }\n    });\n    \n    xhr.open(\"GET\", url);\n    // xhr.setRequestHeader(`api-key`, apiKeySecured);\n    \n    xhr.send();\n    console.log(\"console.log(xhr) 2\");\n    console.log(xhr);\n\n\n\n\n\n\n\n  \n  // fetch(url, {\n  //   rejectUnauthorized: false,\n  //   agent:false,\n  //   method: 'get',\n  //   // mode: 'no-cors',\n  //   // Ces headers passent a condition que la clef soit reconnue par le navigateur\n  //   headers: {\n  //     'Accept': 'application/json, text/plain, */*',\n  //     'Content-Type': 'application/json',\n  //   }\n  //   // body: JSON.stringify({a: 7, str: 'Some string: &=&'})\n  //   }).then(res=>res.json())\n  //     .then(res => console.log(res));\n\n\n\n\n    return \"RETURN\";\n}\n\n\n\n\n\n\n// _request.get(\n//   'https://knl640.krj.gie/api/common/1.0/auth_info',\n//   { json: { key: 'value' } },\n//   function (error, response, body) {\n//       if (!error && response.statusCode == 200) {\n//           console.log(body);\n//       }\n//   }\n// );\n\n\n\n\n\n\n\n\n\n\n\n\n  // ESSAYER DE PASSER DU JSON\n  // tryAuthentication(credentials){\n  //   const url = 'https://knl640.krj.gie/api/mgmt.aaa/1.0/token';\n  //   var json =\"\";\n\n  //     fetch(url, {\n  //       mode: 'no-cors',\n  //       method: 'post',\n  //       headers: {\n  //         \"Content-type\": \"application/json\"\n  //       },\n  //       body: userCredentials\n  //     })\n  //     .then(json)\n  //     .then(function (data) {\n  //       console.log('Request succeeded with JSON response', data);\n  //     });\n  // return \"json\";\n  // }\n\n\n\n\n\n// Refresh token function\n// Argument credentials = object with credentials\ngetNewToken(credentials){\n  console.log(\"Direction : tryAuthentication\")\n  console.log(this.headers)\n    var reponse = this.tryAuthentication(credentials)\n    // var dictionnaire = reponse.json()\n    // On extrait le token\n    // var token = dictionnaire['access_token']\n    var token = ''\n    return token\n}\n\n// GET request function (collect informations through API : hostgroups, applications, webapps...)\n// Argument credentials = object with credentials\n// Argument url = API's url\nretrieveInformationFromAPI(credentials, url){\n    \n    // Adding token to headers for Riverbed access\n    headers = {\"Authorization\": \"Bearer \"+ globalCurrentToken}\n    // Querying Riverbed AppResponse\n    response = session.get(url, headers=headers, verify=False)\n    // If token is expired get a brand new token\n    if (response.status_code == 401){\n        print(\"Token expired, collecting new token . . .\")\n        globalCurrentToken = this.getNewToken(credentials)\n        headers = {\"Authorization\": \"Bearer \"+ globalCurrentToken}\n        response = session.get(url, headers=headers, verify=False)\n    }\n    // Returning server's response, containing all data returned by API\n    return response\n}\n\n\n\nENHANCEDmetricFindHost_groupQuery(query) {\n  this.testPrint();\n  console.log(\"Test des logs :\")\n  console.log(userCredentials)\n  globalCurrentToken = this.tryAuthentication(userCredentials)\n  console.log(globalCurrentToken);\n  this.headers['Authorization']=\"Bearer \"+ globalCurrentToken\n  return \"test\";\n}\n\n\n\n\n\n\n\n  // PROOF OF CONCEPT\n\n\n  // Faire une fonction auth (OU STOCKER LE TOKEN?)\n\n  // Faire une fonction de check token\n\n  // Quand je clique sur la case host group, je trigger:\n      // verif token |||| le refresh?\n      // taper dans l'API AppResponse\n      // récup et mise en forme et pop\n\n  // Fake metric, granularity, etc etc\n\n  // Trigger query ?\n\n\n\n\n  \n\n\n  // Annotation feature is not used\n  annotationQuery(options) {\n    var query = this.templateSrv.replace(options.annotation.query, {}, 'glob');\n    var annotationQuery = {\n      range: options.range,\n      annotation: {\n        name: options.annotation.name,\n        datasource: options.annotation.datasource,\n        enable: options.annotation.enable,\n        iconColor: options.annotation.iconColor,\n        query: query\n      },\n      rangeRaw: options.rangeRaw\n    };\n\n    return this.doRequest({\n      url: this.url + '/annotations',\n      method: 'POST',\n      data: annotationQuery\n    }).then(result => {\n      return result.data;\n    });\n  }\n\n\n  // Ask '/metricsHG' end point, data sent is 'target: \"\" ' and not used by Python script\n  metricFindQuery(query) {\n    var interpolated = {\n        target: this.templateSrv.replace(query, null, 'regex')\n    };\n    console.log(this.userCredentials);\n    return this.doRequest({\n      // Ask this url\n      url: this.url + '/metricsHG',\n      // Send variable 'interpolated' as data\n      data: interpolated,\n      // As data are sent, method is POST\n      method: 'POST',\n      // Response sent by Python is mapped and go for display in correct box\n    }).then(this.mapToTextValue);\n  }\n\n\n  // Ask '/metricsApplication' end point, data sent is 'target: \"\" ' and not used by Python script\n  metricApplicationsFindQuery(query) {\n    var interpolated = {\n        target: this.templateSrv.replace(query, null, 'regex')\n    };\n\n    return this.doRequest({\n      url: this.url + '/metricsApplication',\n      data: interpolated,\n      method: 'POST',\n    }).then(this.mapToTextValue);\n  }\n\n\n  // Ask '/metricsWebApp' end point, data sent is 'target: \"\" ' and not used by Python script\n  metricWAFindQuery(query) {\n    var interpolated = {\n        target: this.templateSrv.replace(query, null, 'regex')\n    };\n\n    return this.doRequest({\n      url: this.url + '/metricsWebApp',\n      data: interpolated,\n      method: 'POST',\n    }).then(this.mapToTextValue);\n  }\n\n  // Ask '/getHost_group' end point, data sent is 'target: \"\" ' and not used by Python script\n  metricFindHost_groupQuery(query) {\n    var interpolated = {\n        target: this.templateSrv.replace(query, null, 'regex')\n    };\n\n    return this.doRequest({\n      url: this.url + '/getHost_group',\n      data: interpolated,\n      method: 'POST',\n    }).then(this.mapToTextValue);\n  }\n\n  // Ask '/getApplicationOptions' end point, data sent is 'target: \"\" ' and not used by Python script\n  metricFindApplicationQuery(query) {\n    var interpolated = {\n        target: this.templateSrv.replace(query, null, 'regex')\n    };\n\n    return this.doRequest({\n      url: this.url + '/getApplicationOptions',\n      data: interpolated,\n      method: 'POST',\n    }).then(this.mapToTextValue);\n  }\n\n  // Ask '/getWebAppOptions' end point, data sent is 'target: \"\" ' and not used by Python script\n  metricFindWebAppQuery(query) {\n    var interpolated = {\n        target: this.templateSrv.replace(query, null, 'regex')\n    };\n\n    return this.doRequest({\n      url: this.url + '/getWebAppOptions',\n      data: interpolated,\n      method: 'POST',\n    }).then(this.mapToTextValue);\n  }\n\n  // Ask '/getPageFamilyOptions' end point, data sent is the letter corresponding to the row used\n  metricFindPageFamilyQuery(grafanaRow) {\n  // At initialization, plugin automaticaly try this end point without GET value, adding fake one\n    if(grafanaRow == '')\n      var goodGrafanaRow = 'A';\n    else\n      var goodGrafanaRow = grafanaRow;\n    var interpolated = {\n        target: goodGrafanaRow\n    };\n    return this.doRequest({\n      url: this.url + '/getPageFamilyOptions',\n      data: interpolated,\n      method: 'POST',\n    }).then(this.mapToTextValue);\n  }  \n\n  // Method giving the possibility to display text  but select id\n  mapToTextValue(result) {\n    return _.map(result.data, (d, i) => {\n      // If there is an object with .value and .txt attribute in JSON\n      if (d && d.text && d.value) {\n        return { text: d.text, value: d.value };\n      } \n      // ???\n      else if (_.isObject(d)) {\n        return { text: d, value: i};\n      }\n      // In other cases just display same text and value\n      return { text: d, value: d };\n    });\n  }\n\n  // http request, options are url(server+endPoint), data(if there is data to send), method(GET or POST))\n  doRequest(options) {\n    // Adding credentials and headers from self attributes \n    options.withCredentials = this.withCredentials;\n    options.headers = {'Content-Type': 'application/json'};\n\n    return this.backendSrv.datasourceRequest(options);\n  }\n\n  // Method to construct the JSON that will be send to the end point /query\n  buildQueryParameters(options) {\n    //remove placeholder targets\n    options.targets = _.filter(options.targets, target => {\n      return target.target !== 'select metric';\n    });\n\n    // This variable correspond to the JSON sent to the end point /query\n    var targets = _.map(options.targets, target => {\n      return {\n        // Each attribute is a field of the JSON\n        target: this.templateSrv.replace(target.target, options.scopedVars, 'regex'),\n        refId: target.refId,\n        hide: target.hide,\n        targetID: target.targetID,\n        metricID: target.metricID,\n        pageFamilyID: target.pageFamilyID,\n        secondTargetID: target.secondTargetID,\n        granularity: target.granularity,\n        type: target.type || ''\n      };\n    });\n\n    options.targets = targets;\n\n    return options;\n  }\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  \n  // These two last methods are not used in this datasource for the moment\n  getTagKeys(options) {\n    return new Promise((resolve, reject) => {\n      this.doRequest({\n        url: this.url + '/tag-keys',\n        method: 'POST',\n        data: options\n      }).then(result => {\n        return resolve(result.data);\n      });\n    });\n  }\n\n  getTagValues(options) {\n    return new Promise((resolve, reject) => {\n      this.doRequest({\n        url: this.url + '/tag-values',\n        method: 'POST',\n        data: options\n      }).then(result => {\n        return resolve(result.data);\n      });\n    });\n  }\n\n}\n"]}