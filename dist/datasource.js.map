{"version":3,"sources":["../src/datasource.js"],"names":["_","process","env","globalHOST","userCredentials","GenericDatasource","instanceSettings","$q","backendSrv","templateSrv","type","url","name","targetID","q","withCredentials","headers","basicAuth","length","options","query","buildQueryParameters","targets","filter","t","hide","i","console","log","when","data","getAdhocFilters","adhocFilters","doRequest","method","then","response","status","message","title","HOST","USERNAME","PASSWORD","json","fetch","referrerPolicy","mode","JSON","stringify","opts","agent","rejectUnauthorized","xhr","XMLHttpRequest","addEventListener","readyState","DONE","responseText","open","send","credentials","reponse","tryAuthentication","token","globalCurrentToken","session","get","verify","False","status_code","print","getNewToken","testPrint","replace","annotation","annotationQuery","range","datasource","enable","iconColor","rangeRaw","result","interpolated","target","mapToTextValue","grafanaRow","goodGrafanaRow","map","d","text","value","isObject","datasourceRequest","scopedVars","refId","metricID","pageFamilyID","secondTargetID","granularity","Promise","resolve","reject"],"mappings":"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","file":"datasource.js","sourcesContent":["\nimport _ from \"lodash\";\nprocess.env[\"NODE_TLS_REJECT_UNAUTHORIZED\"] = 0;\nvar globalCurrentToken;\nvar globalHOST = \"knl640.krj.gie\";\nvar userCredentials = {\n  \"user_credentials\":\n      {\n          \"username\":\"ncrinon\", \"password\":\"krj\"\n      },\n  \"generate_refresh_token\": false\n};\n\n\nexport class GenericDatasource {\n  constructor(instanceSettings, $q, backendSrv, templateSrv) {\n    // \"type\": \"mgent-appresponse-json-datasource\"\n    this.type = instanceSettings.type;\n    // \"url\": \"/api/datasources/proxy/26\"\n    this.url = instanceSettings.url;\n    // \"name\": \"AppResponse\"\n    this.name = instanceSettings.name;\n    this.targetID = instanceSettings.targetID;\n    this.q = $q;\n    // infos about a lot of things about backend server and user logged\n    this.backendSrv = backendSrv;\n    this.templateSrv = templateSrv;\n    this.withCredentials = instanceSettings.withCredentials;\n    this.headers = {'Content-Type': 'application/json'};\n\n  \n    if (typeof instanceSettings.basicAuth === 'string' && instanceSettings.basicAuth.length > 0) {\n      this.headers['Authorization'] = instanceSettings.basicAuth;\n    }\n    \n\n\n\n\n  }\n\n  // Ask '/query' end point, use function buildQueryParameters() to build data\n  // These data are sent to Python \n  query(options) {\n    var query = this.buildQueryParameters(options);\n    query.targets = query.targets.filter(t => !t.hide);\n\n    // Debugging purpose\n    for(var i=0; i<= query.targets.length; i++) {\n      console.log(\"Query \" + i);\n      console.log(query.targets[i]);\n    }\n\n    if (query.targets.length <= 0) {\n      return this.q.when({data: []});\n    }\n\n    if (this.templateSrv.getAdhocFilters) {\n      query.adhocFilters = this.templateSrv.getAdhocFilters(this.name);\n    } else {\n      query.adhocFilters = [];\n    }\n    return this.doRequest({\n      url: this.url + '/query',\n      data: query,\n      method: 'POST'\n    });\n  }\n\n\n  // Function to test if datasource is connected (only used when setting up the plugin in Grafana)\n  testDatasource() {\n    return this.doRequest({\n      url: this.url + '/',\n      method: 'GET',\n    }).then(response => {\n      if (response.status === 200) {\n        return { status: \"success\", message: \"Data source is working\", title: \"Success\" };\n      }\n    });\n  }\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  testPrint(){\n    var HOST = \"knl640.krj.gie\";\n    var USERNAME = \"ncrinon\";\n    var PASSWORD = \"krj\";\n  }\n\n\n\n\n\ntryAuthentication(){\n// FONCTIONNE ::::: FIREFOX DEV Juste un GET infos de la sonde ET RECUPERATION DE REPONSE DANS ANALYSE NETWORK \n// tryAuthentication(credentials){\n  const url = 'https://knl640.krj.gie/api/common/1.0/auth_info';\n  var json =\"\";\n    const response = fetch(url,{\n      referrerPolicy: 'unsafe-url',\n      mode: 'no-cors',\n      method: 'GET', // or 'PUT'\n      headers: {\n        // Ces headers passent a condition que la clef soit reconnue par le navigateur\n      'Accept': 'application/json, text/plain, */*',\n      'Content-Type': 'application/json',\n      },\n    }).then(json)\n    .then(function (data) {\n      console.log(\"console.log(fetch)\");\n      console.log('Request succeeded with JSON response', data);\n    });\n    console.log( JSON.stringify(response) );\n\n\n// ENVOYER DES CREDNENTIAL === CREDENTIAL EST UNE OPTION DE FETCH\n\n\n    // TENTER XHR ###################################################################\n\n    var opts = {agent: false };\n    // SSL options for Node.js client\n    // opts.pfx = this.pfx;\n    // opts.key = this.key;\n    // opts.passphrase = this.passphrase;\n    // opts.cert = this.cert;\n    // opts.ca = this.ca;\n    // opts.ciphers = this.ciphers;\n    opts.rejectUnauthorized = false;\n  \n    var xhr = this.xhr = new XMLHttpRequest(opts);\n    \n    xhr.addEventListener(\"readystatechange\", function () {\n        if (this.readyState === this.DONE) {\n          console.log(\"console.log(xhr) 1\");\n            console.log(this.responseText);\n        }\n    });\n    \n    xhr.open(\"GET\", url);\n    // xhr.setRequestHeader(`api-key`, apiKeySecured);\n    \n    xhr.send();\n    console.log(\"console.log(xhr) 2\");\n    console.log(xhr);\n\n\n\n\n\n\n\n  \n  // fetch(url, {\n  //   rejectUnauthorized: false,\n  //   agent:false,\n  //   method: 'get',\n  //   // mode: 'no-cors',\n  //   // Ces headers passent a condition que la clef soit reconnue par le navigateur\n  //   headers: {\n  //     'Accept': 'application/json, text/plain, */*',\n  //     'Content-Type': 'application/json',\n  //   }\n  //   // body: JSON.stringify({a: 7, str: 'Some string: &=&'})\n  //   }).then(res=>res.json())\n  //     .then(res => console.log(res));\n\n\n\n\n    return \"RETURN\";\n}\n\n\n\n\n\n\n// _request.get(\n//   'https://knl640.krj.gie/api/common/1.0/auth_info',\n//   { json: { key: 'value' } },\n//   function (error, response, body) {\n//       if (!error && response.statusCode == 200) {\n//           console.log(body);\n//       }\n//   }\n// );\n\n\n\n\n\n\n\n\n\n\n\n\n  // ESSAYER DE PASSER DU JSON\n  // tryAuthentication(credentials){\n  //   const url = 'https://knl640.krj.gie/api/mgmt.aaa/1.0/token';\n  //   var json =\"\";\n\n  //     fetch(url, {\n  //       mode: 'no-cors',\n  //       method: 'post',\n  //       headers: {\n  //         \"Content-type\": \"application/json\"\n  //       },\n  //       body: userCredentials\n  //     })\n  //     .then(json)\n  //     .then(function (data) {\n  //       console.log('Request succeeded with JSON response', data);\n  //     });\n  // return \"json\";\n  // }\n\n\n\n\n\n// Refresh token function\n// Argument credentials = object with credentials\ngetNewToken(credentials){\n  console.log(\"Direction : tryAuthentication\")\n  console.log(this.headers)\n    var reponse = this.tryAuthentication(credentials)\n    // var dictionnaire = reponse.json()\n    // On extrait le token\n    // var token = dictionnaire['access_token']\n    var token = ''\n    return token\n}\n\n// GET request function (collect informations through API : hostgroups, applications, webapps...)\n// Argument credentials = object with credentials\n// Argument url = API's url\nretrieveInformationFromAPI(credentials, url){\n    \n    // Adding token to headers for Riverbed access\n    headers = {\"Authorization\": \"Bearer \"+ globalCurrentToken}\n    // Querying Riverbed AppResponse\n    response = session.get(url, headers=headers, verify=False)\n    // If token is expired get a brand new token\n    if (response.status_code == 401){\n        print(\"Token expired, collecting new token . . .\")\n        globalCurrentToken = this.getNewToken(credentials)\n        headers = {\"Authorization\": \"Bearer \"+ globalCurrentToken}\n        response = session.get(url, headers=headers, verify=False)\n    }\n    // Returning server's response, containing all data returned by API\n    return response\n}\n\n\n\nENHANCEDmetricFindHost_groupQuery(query) {\n  this.testPrint();\n  console.log(\"Test des logs :\")\n  console.log(userCredentials)\n  globalCurrentToken = this.tryAuthentication(userCredentials)\n  console.log(globalCurrentToken);\n  this.headers['Authorization']=\"Bearer \"+ globalCurrentToken\n  return \"test\";\n}\n\n\n\n\n\n\n\n  // PROOF OF CONCEPT\n\n\n  // Faire une fonction auth (OU STOCKER LE TOKEN?)\n\n  // Faire une fonction de check token\n\n  // Quand je clique sur la case host group, je trigger:\n      // verif token |||| le refresh?\n      // taper dans l'API AppResponse\n      // récup et mise en forme et pop\n\n  // Fake metric, granularity, etc etc\n\n  // Trigger query ?\n\n\n\n\n  \n\n\n  // Annotation feature is not used\n  annotationQuery(options) {\n    var query = this.templateSrv.replace(options.annotation.query, {}, 'glob');\n    var annotationQuery = {\n      range: options.range,\n      annotation: {\n        name: options.annotation.name,\n        datasource: options.annotation.datasource,\n        enable: options.annotation.enable,\n        iconColor: options.annotation.iconColor,\n        query: query\n      },\n      rangeRaw: options.rangeRaw\n    };\n\n    return this.doRequest({\n      url: this.url + '/annotations',\n      method: 'POST',\n      data: annotationQuery\n    }).then(result => {\n      return result.data;\n    });\n  }\n\n\n  // Ask '/metricsHG' end point, data sent is 'target: \"\" ' and not used by Python script\n  metricFindQuery(query) {\n    var interpolated = {\n        target: this.templateSrv.replace(query, null, 'regex')\n    };\n    console.log(this.userCredentials);\n    return this.doRequest({\n      // Ask this url\n      url: this.url + '/metricsHG',\n      // Send variable 'interpolated' as data\n      data: interpolated,\n      // As data are sent, method is POST\n      method: 'POST',\n      // Response sent by Python is mapped and go for display in correct box\n    }).then(this.mapToTextValue);\n  }\n\n\n  // Ask '/metricsApplication' end point, data sent is 'target: \"\" ' and not used by Python script\n  metricApplicationsFindQuery(query) {\n    var interpolated = {\n        target: this.templateSrv.replace(query, null, 'regex')\n    };\n\n    return this.doRequest({\n      url: this.url + '/metricsApplication',\n      data: interpolated,\n      method: 'POST',\n    }).then(this.mapToTextValue);\n  }\n\n\n  // Ask '/metricsWebApp' end point, data sent is 'target: \"\" ' and not used by Python script\n  metricWAFindQuery(query) {\n    var interpolated = {\n        target: this.templateSrv.replace(query, null, 'regex')\n    };\n\n    return this.doRequest({\n      url: this.url + '/metricsWebApp',\n      data: interpolated,\n      method: 'POST',\n    }).then(this.mapToTextValue);\n  }\n\n  // Ask '/getHost_group' end point, data sent is 'target: \"\" ' and not used by Python script\n  metricFindHost_groupQuery(query) {\n    var interpolated = {\n        target: this.templateSrv.replace(query, null, 'regex')\n    };\n\n    return this.doRequest({\n      url: this.url + '/getHost_group',\n      data: interpolated,\n      method: 'POST',\n    }).then(this.mapToTextValue);\n  }\n\n  // Ask '/getApplicationOptions' end point, data sent is 'target: \"\" ' and not used by Python script\n  metricFindApplicationQuery(query) {\n    var interpolated = {\n        target: this.templateSrv.replace(query, null, 'regex')\n    };\n\n    return this.doRequest({\n      url: this.url + '/getApplicationOptions',\n      data: interpolated,\n      method: 'POST',\n    }).then(this.mapToTextValue);\n  }\n\n  // Ask '/getWebAppOptions' end point, data sent is 'target: \"\" ' and not used by Python script\n  metricFindWebAppQuery(query) {\n    var interpolated = {\n        target: this.templateSrv.replace(query, null, 'regex')\n    };\n\n    return this.doRequest({\n      url: this.url + '/getWebAppOptions',\n      data: interpolated,\n      method: 'POST',\n    }).then(this.mapToTextValue);\n  }\n\n  // Ask '/getPageFamilyOptions' end point, data sent is the letter corresponding to the row used\n  metricFindPageFamilyQuery(grafanaRow) {\n  // At initialization, plugin automaticaly try this end point without GET value, adding fake one\n    if(grafanaRow == '')\n      var goodGrafanaRow = 'A';\n    else\n      var goodGrafanaRow = grafanaRow;\n    var interpolated = {\n        target: goodGrafanaRow\n    };\n    return this.doRequest({\n      url: this.url + '/getPageFamilyOptions',\n      data: interpolated,\n      method: 'POST',\n    }).then(this.mapToTextValue);\n  }  \n\n  // Method giving the possibility to display text  but select id\n  mapToTextValue(result) {\n    return _.map(result.data, (d, i) => {\n      // If there is an object with .value and .txt attribute in JSON\n      if (d && d.text && d.value) {\n        return { text: d.text, value: d.value };\n      } \n      // ???\n      else if (_.isObject(d)) {\n        return { text: d, value: i};\n      }\n      // In other cases just display same text and value\n      return { text: d, value: d };\n    });\n  }\n\n  // http request, options are url(server+endPoint), data(if there is data to send), method(GET or POST))\n  doRequest(options) {\n    // Adding credentials and headers from self attributes \n    options.withCredentials = this.withCredentials;\n    options.headers = {'Content-Type': 'application/json'};\n\n    return this.backendSrv.datasourceRequest(options);\n  }\n\n  // Method to construct the JSON that will be send to the end point /query\n  buildQueryParameters(options) {\n    //remove placeholder targets\n    options.targets = _.filter(options.targets, target => {\n      return target.target !== 'select metric';\n    });\n\n    // This variable correspond to the JSON sent to the end point /query\n    var targets = _.map(options.targets, target => {\n      return {\n        // Each attribute is a field of the JSON\n        target: this.templateSrv.replace(target.target, options.scopedVars, 'regex'),\n        refId: target.refId,\n        hide: target.hide,\n        targetID: target.targetID,\n        metricID: target.metricID,\n        pageFamilyID: target.pageFamilyID,\n        secondTargetID: target.secondTargetID,\n        granularity: target.granularity,\n        type: target.type || ''\n      };\n    });\n\n    options.targets = targets;\n\n    return options;\n  }\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  \n  // These two last methods are not used in this datasource for the moment\n  getTagKeys(options) {\n    return new Promise((resolve, reject) => {\n      this.doRequest({\n        url: this.url + '/tag-keys',\n        method: 'POST',\n        data: options\n      }).then(result => {\n        return resolve(result.data);\n      });\n    });\n  }\n\n  getTagValues(options) {\n    return new Promise((resolve, reject) => {\n      this.doRequest({\n        url: this.url + '/tag-values',\n        method: 'POST',\n        data: options\n      }).then(result => {\n        return resolve(result.data);\n      });\n    });\n  }\n\n}\n"]}